#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;
typedef long long ll;
typedef pair<ll,ll> pi;
const double eps=1e-9;

ll n;
int dp[2000000];
bool valid[10];
void init(){
	memset(dp,1e9,sizeof(dp));
}


// #################################


typedef vector<int> vi;
typedef map<int, int> mii;

ll _sieve_size;
bitset<10000010> bs;   // 10^7 should be enough for most cases
vi primes;   // compact list of primes in form of vector<int>


// first part

void sieve(ll upperbound) {          // create list of primes in [0..upperbound]
  _sieve_size = upperbound + 1;                   // add 1 to include upperbound
  bs.set();                                                 // set all bits to 1
  bs[0] = bs[1] = 0;                                     // except index 0 and 1
  for (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {
    // cross out multiples of i starting from i * i!
    for (ll j = i * i; j <= _sieve_size; j += i) bs[j] = 0;
    primes.push_back((int)i);  // also add this vector containing list of primes
} }                                           // call this method in main method

bool isPrime(ll N) {                 // a good enough deterministic prime tester
  if (N <= _sieve_size) return bs[N];                   // O(1) for small primes
  for (int i = 0; i < (int)primes.size(); i++)
    if (N % primes[i] == 0) return false;
  return true;                    // it takes longer time if N is a large prime!
}                      // note: only work for N <= (last prime in vi "primes")^2


// second part

vi primeFactors(ll N) {   // remember: vi is vector of integers, ll is long long
  vi factors;                    // vi `primes' (generated by sieve) is optional
  ll PF_idx = 0, PF = primes[PF_idx];     // using PF = 2, 3, 4, ..., is also ok
  while (N != 1 && (PF * PF <= N)) {   // stop at sqrt(N), but N can get smaller
    while (N % PF == 0) { N /= PF; factors.push_back(PF); }    // remove this PF
    PF = primes[++PF_idx];                              // only consider primes!
  }
  if (N != 1) factors.push_back(N);     // special case if N is actually a prime
  return factors;         // if pf exceeds 32-bit integer, you have to change vi
}





// #################################
int numDig(int n){
	int ans=0;
	while(n>0){
		ans++;
		n/=10;
	}
	return ans;
}

void generate(){
	if(valid[0])
		dp[0]=1;
	for (int mask = 1; mask <= 1000000; ++mask)
	{
		int temp=mask;
		bool pos=1;
		for (int i = 0; i <numDig(mask) && pos ; ++i)
		{
			if(!valid[temp%10])
				pos=0;
		}		
		if(pos)
			dp[mask]=numDig(mask);
		else
			dp[mask]=1e9;
	}
}

void recurse(std::vector<pi> v,int pos,int num1,int n){
	if(pos==v.size()){
		dp[n]=min(dp[n],dp[num1]+dp[n/num1]+1);
		return ;
	}
	pi p=v[pos];
	int cur=1;
	for (int i = 0; i <=p.second ; ++i)
	{
		recurse(v,pos+1,num1*cur,n);
		cur*=p.first;
	}
}

int check(){
	int ans=dp[n];
	for (int i = 2; i <=n ; ++i)
	{
		vi factors=primeFactors(i);
		if(factors.size()==1) continue;
		// for(auto x:factors)
		// 	cout<<"x "<<x<<" ";
		// cout<<endl;
		sort(factors.begin(),factors.end());
		map<int,int> F;
		for(auto x:factors) 
			F[x]++;
		// cout<<"Hello\n";
		std::vector<pi> v;
		for(map<int,int>::iterator it=F.begin();it!=F.end();++it)
			v.push_back(pi(it->first,it->second));
		// for(auto x:v)
		// 	cout<<"a : "<<x.first<<" b : "<<x.second<<endl; 
		recurse(v,0,1,i);
	}
	return dp[n];
}

int main() {
	ll t;
	cin>>t;
	sieve(2e6);
	for (ll cas = 1; cas <= t; ++cas)
	{
		/* code */
		init();
		for (int i = 0; i <10; ++i)
		{
			cin>>valid[i];
		}
		
		cin>>n;
		generate();
		// cout<<"generate \n";
		// for(int i=0;i<20;i++)
		// 	cout<<dp[i]<<endl;
		if(dp[n]!=1e9){
			printf("Case #%lld: %lld\n",cas,dp[n]);
			continue;
		}
		ll ans=check()+1;
		if(ans<1e9)
			printf("Case #%lld: %lld\n",cas,ans);
		else
			printf("Case #%lld: Impossible\n",cas );
	}
	return 0;
}